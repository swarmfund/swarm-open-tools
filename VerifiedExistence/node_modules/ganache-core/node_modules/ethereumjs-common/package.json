{
  "_args": [
    [
      "ethereumjs-common@https://registry.npmjs.org/ethereumjs-common/-/ethereumjs-common-1.5.0.tgz",
      "/home/dominik/blockchain/DocProof/node_modules/ganache-core"
    ]
  ],
  "_from": "ethereumjs-common@https://registry.npmjs.org/ethereumjs-common/-/ethereumjs-common-1.5.0.tgz",
  "_id": "ethereumjs-common@1.5.0",
  "_inCache": true,
  "_location": "/ganache-core/ethereumjs-common",
  "_phantomChildren": {},
  "_requested": {
    "name": "ethereumjs-common",
    "raw": "ethereumjs-common@https://registry.npmjs.org/ethereumjs-common/-/ethereumjs-common-1.5.0.tgz",
    "rawSpec": "https://registry.npmjs.org/ethereumjs-common/-/ethereumjs-common-1.5.0.tgz",
    "scope": null,
    "spec": "https://registry.npmjs.org/ethereumjs-common/-/ethereumjs-common-1.5.0.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "/ganache-core",
    "/ganache-core/eth-json-rpc-middleware/ethereumjs-vm",
    "/ganache-core/eth-json-rpc-middleware/ethereumjs-vm/ethereumjs-block",
    "/ganache-core/eth-json-rpc-middleware/ethereumjs-vm/ethereumjs-tx",
    "/ganache-core/eth-tx-summary/ethereumjs-vm",
    "/ganache-core/eth-tx-summary/ethereumjs-vm/ethereumjs-block",
    "/ganache-core/eth-tx-summary/ethereumjs-vm/ethereumjs-tx",
    "/ganache-core/ethereumjs-block",
    "/ganache-core/ethereumjs-blockchain",
    "/ganache-core/ethereumjs-tx",
    "/ganache-core/ethereumjs-vm",
    "/ganache-core/web3-eth-accounts",
    "/ganache-core/web3-provider-engine/ethereumjs-vm",
    "/ganache-core/web3-provider-engine/ethereumjs-vm/ethereumjs-block",
    "/ganache-core/web3-provider-engine/ethereumjs-vm/ethereumjs-tx"
  ],
  "_resolved": "https://registry.npmjs.org/ethereumjs-common/-/ethereumjs-common-1.5.0.tgz",
  "_shasum": "d3e82fc7c47c0cef95047f431a99485abc9bb1cd",
  "_shrinkwrap": null,
  "_spec": "ethereumjs-common@https://registry.npmjs.org/ethereumjs-common/-/ethereumjs-common-1.5.0.tgz",
  "_where": "/home/dominik/blockchain/DocProof/node_modules/ganache-core",
  "author": "",
  "bugs": {
    "url": "https://github.com/ethereumjs/ethereumjs-common/issues"
  },
  "dependencies": {},
  "description": "Resources common to all Ethereum implementations",
  "devDependencies": {
    "@ethereumjs/config-nyc": "^1.1.0",
    "@ethereumjs/config-prettier": "^1.1.0",
    "@ethereumjs/config-tsc": "^1.1.0",
    "@ethereumjs/config-tslint": "^1.1.0",
    "@types/node": "^10.12.2",
    "@types/tape": "^4.2.33",
    "coveralls": "^3.0.1",
    "husky": "^2.1.0",
    "nyc": "^11.7.1",
    "prettier": "^1.15.3",
    "tape": "^4.9.2",
    "ts-node": "^7.0.1",
    "tslint": "^5.12.0",
    "typedoc": "^0.14.0",
    "typedoc-plugin-markdown": "^1.1.21",
    "typescript": "^3.2.2",
    "typestrict": "^1.0.2"
  },
  "files": [
    "dist"
  ],
  "homepage": "https://github.com/ethereumjs-ethereumjs/common",
  "husky": {
    "hooks": {
      "pre-push": "npm run lint"
    }
  },
  "keywords": [
    "bootstrap",
    "constants",
    "ethereum",
    "ethereumjs",
    "genesis",
    "networks",
    "parameters"
  ],
  "license": "MIT",
  "main": "./dist/index.js",
  "maintainers": [
    {
      "name": "Holger Drewes",
      "email": "Holger.Drewes@gmail.com"
    }
  ],
  "name": "ethereumjs-common",
  "optionalDependencies": {},
  "readme": "# SYNOPSIS\n\n[![Build Status](https://travis-ci.org/ethereumjs/ethereumjs-common.svg?branch=master)](https://travis-ci.org/ethereumjs/ethereumjs-common)\n[![Coverage Status](https://img.shields.io/coveralls/ethereumjs/ethereumjs-common.svg?style=flat-square)](https://coveralls.io/r/ethereumjs/ethereumjs-common)\n[![JavaScript Style Guide](https://img.shields.io/badge/code_style-standard-brightgreen.svg)](https://standardjs.com)\n[![Gitter](https://img.shields.io/gitter/room/ethereum/ethereumjs.svg?style=flat-square)]()\n\n# ETHEREUMJS-COMMON\n\nResources common to all Ethereum implementations\n\nSucceeds the old [ethereum/common](https://github.com/ethereumjs/common/) library.\n\n# INSTALL\n\n`npm install ethereumjs-common`\n\n# USAGE\n\nAll parameters can be accessed through the `Common` class which can be required through the\nmain package and instantiated either with just the `chain` (e.g. 'mainnet') or the `chain`\ntogether with a specific `hardfork` provided.\n\nHere are some simple usage examples:\n\n```javascript\nconst Common = require('ethereumjs-common')\n\n// Instantiate with only the chain\nlet c = new Common('ropsten')\nc.param('gasPrices', 'ecAddGas', 'byzantium') // 500\n\n// Chain and hardfork provided\nc = new Common('ropsten', 'byzantium')\nc.param('pow', 'minerReward') // 3000000000000000000\n\n// Access genesis data for Ropsten network\nc.genesis().hash // 0x41941023680923e0fe4d74a34bdac8141f2540e3ae90623718e47d66d1ca4a2d\n\n// Get bootstrap nodes for chain/network\nc.bootstrapNodes() // Array with current nodes\n```\n\nIt is encouraged to also explicitly set the `supportedHardforks` if the initializing library\nonly supports a certain range of `hardforks`:\n\n```javascript\nlet c = new Common('ropsten', null, ['byzantium', 'constantinople', 'petersburg'])\n```\n\nThis will e.g. throw an error when a param is requested for an unsupported hardfork and\nlike this prevents unpredicted behaviour.\n\n# API\n\nSee the API documentation for a full list of functions for accessing specific chain and\ndepending hardfork parameters. There are also additional helper functions like\n`paramByBlock (topic, name, blockNumber)` or `hardforkIsActiveOnBlock (hardfork, blockNumber)`\nto ease `blockNumber` based access to parameters.\n\n- [API Docs](./docs/README.md)\n\n# Hardfork Params\n\n## Active Hardforks\n\nThere are currently parameter changes by the following past and future hardfork by the\nlibrary supported:\n\n- `chainstart`\n- `homestead`\n- `dao`\n- `tangerineWhistle`\n- `spuriousDragon`\n- `byzantium`\n- `constantinople`\n- `petersburg` (aka `constantinopleFix`, apply together with `constantinople`)\n- `istanbul`\n- `muirGlacier`\n\n## Future Hardforks\n\nThe `muirGlacier` HF delaying the difficulty bomb and scheduled for January 2020\nis supported by the library since `v1.5.0`.\n\n## Parameter Access\n\nFor hardfork-specific parameter access with the `param()` and `paramByBlock()` functions\nyou can use the following `topics`:\n\n- `gasConfig`\n- `gasPrices`\n- `vm`\n- `pow`\n- `casper`\n- `sharding`\n\nSee one of the hardfork files like `byzantium.json` in the `hardforks` directory\nfor an overview. For consistency, the chain start (`chainstart`) is considered an own\nhardfork.\n\nThe hardfork-specific json files only contain the deltas from `chainstart` and\nshouldn't be accessed directly until you have a specific reason for it.\n\nNote: The list of `gasPrices` and gas price changes on hardforks is consistent\nbut not complete, so there are currently gas price values missing (PRs welcome!).\n\n# Chain Params\n\nSupported chains:\n\n- `mainnet`\n- `ropsten`\n- `rinkeby`\n- `kovan`\n- `goerli` (final configuration since `v1.1.0`)\n- Private/custom chain parameters\n\nThe following chain-specific parameters are provided:\n\n- `name`\n- `chainId`\n- `networkId`\n- `genesis` block header values\n- `hardforks` block numbers\n- `bootstrapNodes` list\n\nTo get an overview of the different parameters have a look at one of the chain-specifc\nfiles like `mainnet.json` in the `chains` directory, or to the `Chain` type in [./src/types.ts](./src/types.ts).\n\n## Working with private/custom chains\n\nThere are two ways to set up a common instance with parameters for a private/custom chain:\n\n1. You can pass a dictionary - conforming to the parameter format described above - with your custom values in\n   the constructor or the `setChain()` method for the `chain` parameter.\n\n2. You can base your custom chain's config in a standard one, using the `Common.forCustomChain` method.\n\n# Bootstrap Nodes\n\nThere is no separate config file for bootstrap nodes like in the old `ethereum-common` library.\nInstead use the `common.bootstrapNodes()` function to get nodes for a specific chain/network.\n\n# Genesis States\n\nNetwork-specific genesis files are located in the `genesisStates` folder.\n\nDue to the large file sizes genesis states are not directly included in the `index.js` file\nbut have to be accessed directly, e.g.:\n\n```javascript\nconst mainnetGenesisState = require('ethereumjs-common/dist/genesisStates/mainnet')\n```\n\nOr by accessing dynamically:\n\n```javascript\nconst genesisStates = require('ethereumjs-common/dist/genesisStates')\nconst mainnetGenesisState = genesisStates.genesisStateByName('mainnet')\nconst mainnetGenesisState = genesisStates.genesisStateById(1) // alternative via network Id\n```\n\n# EthereumJS\n\nSee our organizational [documentation](https://ethereumjs.readthedocs.io) for an introduction to `EthereumJS` as well as information on current standards and best practices.\n\nIf you want to join for work or do improvements on the libraries have a look at our [contribution guidelines](https://ethereumjs.readthedocs.io/en/latest/contributing.html).\n\n# LICENSE\n\n[MIT](https://opensource.org/licenses/MIT)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/ethereumjs/ethereumjs-common.git"
  },
  "scripts": {
    "build": "ethereumjs-config-build",
    "coverage": "ethereumjs-config-coverage",
    "coveralls": "ethereumjs-config-coveralls",
    "docs:build": "typedoc --out docs --excludePrivate --excludeExternals --mode file --readme none --theme markdown --mdEngine github src/*.ts src/genesisStates/*.ts",
    "format": "ethereumjs-config-format",
    "format:fix": "ethereumjs-config-format-fix",
    "lint": "ethereumjs-config-lint",
    "lint:fix": "ethereumjs-config-lint-fix",
    "prepublishOnly": "npm run test && npm run build",
    "test": "npm run lint && npm run unitTests",
    "test:fix": "npm run lint:fix && npm run unitTests",
    "tsc": "ethereumjs-config-tsc",
    "tslint": "ethereumjs-config-tslint",
    "tslint:fix": "ethereumjs-config-tslint-fix",
    "unitTests": "ts-node ./node_modules/tape/bin/tape ./tests/*.ts"
  },
  "types": "./dist/index.d.ts",
  "version": "1.5.0"
}
