{
  "_args": [
    [
      "memdown@https://registry.npmjs.org/memdown/-/memdown-1.4.1.tgz",
      "/home/dominik/blockchain/DocProof/node_modules/ganache-core/node_modules/merkle-patricia-tree"
    ]
  ],
  "_from": "memdown@https://registry.npmjs.org/memdown/-/memdown-1.4.1.tgz",
  "_id": "memdown@1.4.1",
  "_inCache": true,
  "_location": "/ganache-core/merkle-patricia-tree/memdown",
  "_phantomChildren": {},
  "_requested": {
    "name": "memdown",
    "raw": "memdown@https://registry.npmjs.org/memdown/-/memdown-1.4.1.tgz",
    "rawSpec": "https://registry.npmjs.org/memdown/-/memdown-1.4.1.tgz",
    "scope": null,
    "spec": "https://registry.npmjs.org/memdown/-/memdown-1.4.1.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "/ganache-core/merkle-patricia-tree"
  ],
  "_resolved": "https://registry.npmjs.org/memdown/-/memdown-1.4.1.tgz",
  "_shasum": "b4e4e192174664ffbae41361aa500f3119efe215",
  "_shrinkwrap": null,
  "_spec": "memdown@https://registry.npmjs.org/memdown/-/memdown-1.4.1.tgz",
  "_where": "/home/dominik/blockchain/DocProof/node_modules/ganache-core/node_modules/merkle-patricia-tree",
  "authors": [
    "Rod Vagg <rod@vagg.org> (https://github.com/rvagg)"
  ],
  "browser": {
    "./immediate.js": "./immediate-browser.js",
    "rimraf": false
  },
  "bugs": {
    "url": "https://github.com/Level/memdown/issues"
  },
  "contributors": [
    {
      "name": "Julian Gruber",
      "email": "julian@juliangruber.com",
      "url": "https://github.com/juliangruber"
    },
    {
      "name": "Meirion Hughes",
      "email": "crakinshot@yahoo.com",
      "url": "https://github.com/meirionhughes"
    }
  ],
  "dependencies": {
    "abstract-leveldown": "~2.7.1",
    "functional-red-black-tree": "^1.0.1",
    "immediate": "^3.2.3",
    "inherits": "~2.0.1",
    "ltgt": "~2.2.0",
    "safe-buffer": "~5.1.1"
  },
  "description": "An drop-in replacement for LevelDOWN that works in memory only",
  "devDependencies": {
    "bench": "*",
    "faucet": "*",
    "istanbul": "^0.4.2",
    "istanbul-coveralls": "^1.0.3",
    "rimraf": "*",
    "standard": "^10.0.3",
    "tape": "*",
    "zuul": "github:vweevers/zuul#custom-loopback-hostname"
  },
  "files": [
    "immediate-browser.js",
    "immediate.js",
    "memdown.d.ts",
    "memdown.js"
  ],
  "homepage": "https://github.com/Level/memdown",
  "keywords": [
    "leveldb",
    "leveldown",
    "levelup",
    "memory"
  ],
  "license": "MIT",
  "main": "memdown.js",
  "name": "memdown",
  "optionalDependencies": {},
  "readme": "# memdown <img alt=\"LevelDB Logo\" height=\"20\" src=\"http://leveldb.org/img/logo.svg\" />\n\n> In-memory `abstract-leveldown` store for Node.js and browsers.\n\n[![Travis](https://secure.travis-ci.org/Level/memdown.png)](http://travis-ci.org/Level/memdown) [![Coverage Status](https://coveralls.io/repos/Level/memdown/badge.svg?branch=master&service=github)](https://coveralls.io/github/Level/memdown?branch=master) [![npm](https://img.shields.io/npm/v/memdown.svg)](https://www.npmjs.com/package/memdown) [![npm](https://img.shields.io/npm/dm/memdown.svg)](https://www.npmjs.com/package/memdown) [![Greenkeeper badge](https://badges.greenkeeper.io/Level/memdown.svg)](https://greenkeeper.io/)\n\n## Example\n\n`levelup` allows you to pass a `db` option to its constructor. This overrides the default `leveldown` store.\n\n```js\n// Note that if multiple instances point to the same location,\n// the db will be shared, but only per process.\nvar levelup = require('levelup')\nvar db = levelup('/some/location', { db: require('memdown') })\n\ndb.put('hey', 'you', function (err) {\n  if (err) throw err\n\n  db.createReadStream()\n    .on('data', function (kv) {\n      console.log('%s: %s', kv.key, kv.value)\n    })\n    .on('end', function () {\n      console.log('done')\n    })\n})\n```\n\nYour data is discarded when the process ends or you release a reference to the database. Note as well, though the internals of `memdown` operate synchronously - `levelup` does not.\n\nRunning our example gives:\n\n```\nhey: you\ndone\n```\n\nBrowser support\n----\n\n[![Sauce Test Status](https://saucelabs.com/browser-matrix/level-ci.svg)](https://saucelabs.com/u/level-ci)\n\n`memdown` requires a ES5-capable browser. If you're using one that's isn't (e.g. PhantomJS, Android < 4.4, IE < 10) then you will need [es5-shim](https://github.com/es-shims/es5-shim).\n\nGlobal Store\n---\n\nEven though it's in memory, the location parameter does do something. `memdown`\nhas a global cache, which it uses to save databases by the path string.\n\nSo for instance if you create these two instances:\n\n```js\nvar db1 = levelup('foo', {db: require('memdown')});\nvar db2 = levelup('foo', {db: require('memdown')});\n```\n\nThen they will actually share the same data, because the `'foo'` string is the same.\n\nYou may clear this global store using `memdown.clearGlobalStore()`:\n\n```js\nrequire('memdown').clearGlobalStore();\n```\n\nBy default, it doesn't delete the store but replaces it with a new one, so the open instance of `memdown` will not be affected.\n\n`clearGlobalStore` takes a single parameter, which if truthy clears the store strictly by deleting each individual key:\n\n```js\nrequire('memdown').clearGlobalStore(true); // delete each individual key\n```\n\nIf you are using `memdown` somewhere else while simultaneously clearing the global store in this way, then it may throw an error or cause unexpected results.\n\nTest\n----\n\nIn addition to the regular `npm test`, you can test `memdown` in a browser of choice with:\n\n    npm run test-browser-local\n\nTo check code coverage:\n\n    npm run coverage\n\nLicence\n---\n\n`memdown` is Copyright (c) 2013-2017 Rod Vagg [@rvagg](https://twitter.com/rvagg) and licensed under the MIT licence. All rights not explicitly granted in the MIT license are reserved. See the included LICENSE file for more details.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/Level/memdown.git"
  },
  "scripts": {
    "coverage": "istanbul cover -i memdown.js ./node_modules/.bin/tape ./test.js && istanbul check-coverage --lines 90 --function 80 --statements 90 --branches 80",
    "report-coverage": "npm run coverage && istanbul-coveralls",
    "test": "standard && node ./test.js --stderr | faucet",
    "test-browser-local": "zuul --ui tape --no-coverage --local 9000 ./test.js",
    "test-browsers": "zuul --browser-retries 2 --sauce-connect --concurrency 5 --loopback zuul.local --no-coverage ./test.js"
  },
  "typings": "memdown.d.ts",
  "version": "1.4.1"
}
