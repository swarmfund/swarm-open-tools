{
  "_args": [
    [
      "mkdirp@https://registry.npmjs.org/mkdirp/-/mkdirp-1.0.3.tgz",
      "/home/dominik/blockchain/DocProof/node_modules/ganache-core"
    ]
  ],
  "_from": "mkdirp@https://registry.npmjs.org/mkdirp/-/mkdirp-1.0.3.tgz",
  "_id": "mkdirp@1.0.3",
  "_inCache": true,
  "_location": "/ganache-core/mkdirp",
  "_phantomChildren": {},
  "_requested": {
    "name": "mkdirp",
    "raw": "mkdirp@https://registry.npmjs.org/mkdirp/-/mkdirp-1.0.3.tgz",
    "rawSpec": "https://registry.npmjs.org/mkdirp/-/mkdirp-1.0.3.tgz",
    "scope": null,
    "spec": "https://registry.npmjs.org/mkdirp/-/mkdirp-1.0.3.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "/ganache-core/mkdirp-promise"
  ],
  "_resolved": "https://registry.npmjs.org/mkdirp/-/mkdirp-1.0.3.tgz",
  "_shasum": "4cf2e30ad45959dddea53ad97d518b6c8205e1ea",
  "_shrinkwrap": null,
  "_spec": "mkdirp@https://registry.npmjs.org/mkdirp/-/mkdirp-1.0.3.tgz",
  "_where": "/home/dominik/blockchain/DocProof/node_modules/ganache-core",
  "bin": {
    "mkdirp": "bin/cmd.js"
  },
  "bugs": {
    "url": "https://github.com/isaacs/node-mkdirp/issues"
  },
  "dependencies": {},
  "description": "Recursively mkdir, like `mkdir -p`",
  "devDependencies": {
    "require-inject": "^1.4.4",
    "tap": "^14.10.6"
  },
  "engines": {
    "node": ">=10"
  },
  "files": [
    "bin",
    "index.js",
    "lib"
  ],
  "homepage": "https://github.com/isaacs/node-mkdirp#readme",
  "keywords": [
    "dir",
    "directory",
    "make",
    "make dir",
    "mkdir",
    "native",
    "recursive"
  ],
  "license": "MIT",
  "main": "index.js",
  "name": "mkdirp",
  "optionalDependencies": {},
  "readme": "# mkdirp\n\nLike `mkdir -p`, but in Node.js!\n\nNow with a modern API and no\\* bugs!\n\n<small>\\* may contain some bugs</small>\n\n# example\n\n## pow.js\n\n```js\nconst mkdirp = require('mkdirp')\n\n// return value is a Promise resolving to the first directory created\nmkdirp('/tmp/foo/bar/baz').then(made =>\n  console.log(`made directories, starting with ${made}`))\n```\n\nOutput (where `/tmp/foo` already exists)\n\n```\nmade directories, starting with /tmp/foo/bar\n```\n\nOr, if you don't have time to wait around for promises:\n\n```js\nconst mkdirp = require('mkdirp')\n\n// return value is the first directory created\nconst made = mkdirp.sync('/tmp/foo/bar/baz')\nconsole.log(`made directories, starting with ${made}`)\n```\n\nAnd now /tmp/foo/bar/baz exists, huzzah!\n\n# methods\n\n```js\nconst mkdirp = require('mkdirp')\n```\n\n## mkdirp(dir, [opts]) -> Promise<String | undefined>\n\nCreate a new directory and any necessary subdirectories at `dir` with octal\npermission string `opts.mode`. If `opts` is a string or number, it will be\ntreated as the `opts.mode`.\n\nIf `opts.mode` isn't specified, it defaults to `0o777 &\n(~process.umask())`.\n\nPromise resolves to first directory `made` that had to be created, or\n`undefined` if everything already exists.  Promise rejects if any errors\nare encountered.  Note that, in the case of promise rejection, some\ndirectories _may_ have been created, as recursive directory creation is not\nan atomic operation.\n\nYou can optionally pass in an alternate `fs` implementation by passing in\n`opts.fs`. Your implementation should have `opts.fs.mkdir(path, opts, cb)`\nand `opts.fs.stat(path, cb)`.\n\nYou can also override just one or the other of `mkdir` and `stat` by\npassing in `opts.stat` or `opts.mkdir`, or providing an `fs` option that\nonly overrides one of these.\n\n## mkdirp.sync(dir, opts) -> String|null\n\nSynchronously create a new directory and any necessary subdirectories at\n`dir` with octal permission string `opts.mode`. If `opts` is a string or\nnumber, it will be treated as the `opts.mode`.\n\nIf `opts.mode` isn't specified, it defaults to `0o777 &\n(~process.umask())`.\n\nReturns the first directory that had to be created, or undefined if\neverything already exists.\n\nYou can optionally pass in an alternate `fs` implementation by passing in\n`opts.fs`. Your implementation should have `opts.fs.mkdirSync(path, mode)`\nand `opts.fs.statSync(path)`.\n\nYou can also override just one or the other of `mkdirSync` and `statSync`\nby passing in `opts.statSync` or `opts.mkdirSync`, or providing an `fs`\noption that only overrides one of these.\n\n## mkdirp.manual, mkdirp.manualSync\n\nUse the manual implementation (not the native one).  This is the default\nwhen the native implementation is not available or the stat/mkdir\nimplementation is overridden.\n\n## mkdirp.native, mkdirp.nativeSync\n\nUse the native implementation (not the manual one).  This is the default\nwhen the native implementation is available and stat/mkdir are not\noverridden.\n\n# implementation\n\nOn Node.js v10.12.0 and above, use the native `fs.mkdir(p,\n{recursive:true})` option, unless `fs.mkdir`/`fs.mkdirSync` has been\noverridden by an option.\n\n## native implementation\n\n- If the path is a root directory, then pass it to the underlying\n  implementation and return the result/error.  (In this case, it'll either\n  succeed or fail, but we aren't actually creating any dirs.)\n- Walk up the path statting each directory, to find the first path that\n  will be created, `made`.\n- Call `fs.mkdir(path, { recursive: true })` (or `fs.mkdirSync`)\n- If error, raise it to the caller.\n- Return `made`.\n\n## manual implementation\n\n- Call underlying `fs.mkdir` implementation, with `recursive: false`\n- If error:\n  - If path is a root directory, raise to the caller and do not handle it\n  - If ENOENT, mkdirp parent dir, store result as `made`\n  - stat(path)\n    - If error, raise original `mkdir` error\n    - If directory, return `made`\n    - Else, raise original `mkdir` error\n- else\n  - return `undefined` if a root dir, or `made` if set, or `path`\n\n## windows vs unix caveat\n\nOn Windows file systems, attempts to create a root directory (ie, a drive\nletter or root UNC path) will fail.  If the root directory exists, then it\nwill fail with `EPERM`.  If the root directory does not exist, then it will\nfail with `ENOENT`.\n\nOn posix file systems, attempts to create a root directory (in recursive\nmode) will succeed silently, as it is treated like just another directory\nthat already exists.  (In non-recursive mode, of course, it fails with\n`EEXIST`.)\n\nIn order to preserve this system-specific behavior (and because it's not as\nif we can create the parent of a root directory anyway), attempts to create\na root directory are passed directly to the `fs` implementation, and any\nerrors encountered are not handled.\n\n## native error caveat\n\nThe native implementation (as of at least Node.js v13.4.0) does not provide\nappropriate errors in some cases (see\n[nodejs/node#31481](https://github.com/nodejs/node/issues/31481) and\n[nodejs/node#28015](https://github.com/nodejs/node/issues/28015)).\n\nIn order to work around this issue, the native implementation will fall\nback to the manual implementation if an `ENOENT` error is encountered.\n\n# choosing a recursive mkdir implementation\n\nThere are a few to choose from!  Use the one that suits your needs best :D\n\n## use `fs.mkdir(path, {recursive: true}, cb)` if:\n\n- You wish to optimize performance even at the expense of other factors.\n- You don't need to know the first dir created.\n- You are ok with getting `ENOENT` as the error when some other problem is\n  the actual cause.\n- You can limit your platforms to Node.js v10.12 and above.\n- You're ok with using callbacks instead of promises.\n- You don't need/want a CLI.\n- You don't need to override the `fs` methods in use.\n\n## use this module (mkdirp 1.x) if:\n\n- You need to know the first directory that was created.\n- You wish to use the native implementation if available, but fall back\n  when it's not.\n- You prefer promise-returning APIs to callback-taking APIs.\n- You want more useful error messages than the native recursive mkdir\n  provides (at least as of Node.js v13.4), and are ok with re-trying on\n  `ENOENT` to achieve this.\n- You need (or at least, are ok with) a CLI.\n- You need to override the `fs` methods in use.\n\n## use [`make-dir`](http://npm.im/make-dir) if:\n\n- You do not need to know the first dir created (and wish to save a few\n  `stat` calls when using the native implementation for this reason).\n- You wish to use the native implementation if available, but fall back\n  when it's not.\n- You prefer promise-returning APIs to callback-taking APIs.\n- You are ok with occasionally getting `ENOENT` errors for failures that\n  are actually related to something other than a missing file system entry.\n- You don't need/want a CLI.\n- You need to override the `fs` methods in use.\n\n## use mkdirp 0.x if:\n\n- You need to know the first directory that was created.\n- You need (or at least, are ok with) a CLI.\n- You need to override the `fs` methods in use.\n- You're ok with using callbacks instead of promises.\n- You are not running on Windows, where the root-level ENOENT errors can\n  lead to infinite regress.\n- You think vinyl just sounds warmer and richer for some weird reason.\n- You are supporting truly ancient Node.js versions, before even the advent\n  of a `Promise` language primitive.  (Please don't.  You deserve better.)\n\n# cli\n\nThis package also ships with a `mkdirp` command.\n\n```\n$ mkdirp -h\n\nusage: mkdirp [DIR1,DIR2..] {OPTIONS}\n\n  Create each supplied directory including any necessary parent directories\n  that don't yet exist.\n\n  If the directory already exists, do nothing.\n\nOPTIONS are:\n\n  -m<mode>       If a directory needs to be created, set the mode as an octal\n  --mode=<mode>  permission string.\n\n  -v --version   Print the mkdirp version number\n\n  -h --help      Print this helpful banner\n\n  -p --print     Print the first directories created for each path provided\n\n  --manual       Use manual implementation, even if native is available\n```\n\n# install\n\nWith [npm](http://npmjs.org) do:\n\n```\nnpm install mkdirp\n```\n\nto get the library locally, or\n\n```\nnpm install -g mkdirp\n```\n\nto get the command everywhere, or\n\n```\nnpx mkdirp ...\n```\n\nto run the command without installing it globally.\n\n# platform support\n\nThis module works on node v8, but only v10 and above are officially\nsupported, as Node v8 reached its LTS end of life 2020-01-01, which is in\nthe past, as of this writing.\n\n# license\n\nMIT\n",
  "readmeFilename": "readme.markdown",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/isaacs/node-mkdirp.git"
  },
  "scripts": {
    "postpublish": "git push origin --follow-tags",
    "postversion": "npm publish",
    "preversion": "npm test",
    "snap": "tap",
    "test": "tap"
  },
  "tap": {
    "check-coverage": true,
    "coverage-map": "map.js"
  },
  "version": "1.0.3"
}
