{
  "_args": [
    [
      "memdown@https://registry.npmjs.org/memdown/-/memdown-3.0.0.tgz",
      "/home/dominik/blockchain/DocProof/node_modules/ganache-core/node_modules/level-mem"
    ]
  ],
  "_from": "memdown@https://registry.npmjs.org/memdown/-/memdown-3.0.0.tgz",
  "_id": "memdown@3.0.0",
  "_inCache": true,
  "_location": "/ganache-core/level-mem/memdown",
  "_phantomChildren": {},
  "_requested": {
    "name": "memdown",
    "raw": "memdown@https://registry.npmjs.org/memdown/-/memdown-3.0.0.tgz",
    "rawSpec": "https://registry.npmjs.org/memdown/-/memdown-3.0.0.tgz",
    "scope": null,
    "spec": "https://registry.npmjs.org/memdown/-/memdown-3.0.0.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "/ganache-core/level-mem"
  ],
  "_resolved": "https://registry.npmjs.org/memdown/-/memdown-3.0.0.tgz",
  "_shasum": "93aca055d743b20efc37492e9e399784f2958309",
  "_shrinkwrap": null,
  "_spec": "memdown@https://registry.npmjs.org/memdown/-/memdown-3.0.0.tgz",
  "_where": "/home/dominik/blockchain/DocProof/node_modules/ganache-core/node_modules/level-mem",
  "authors": [
    "Rod Vagg <rod@vagg.org> (https://github.com/rvagg)"
  ],
  "browser": {
    "./immediate.js": "./immediate-browser.js"
  },
  "bugs": {
    "url": "https://github.com/Level/memdown/issues"
  },
  "contributors": [
    {
      "name": "Julian Gruber",
      "email": "julian@juliangruber.com",
      "url": "https://github.com/juliangruber"
    }
  ],
  "dependencies": {
    "abstract-leveldown": "~5.0.0",
    "functional-red-black-tree": "~1.0.1",
    "immediate": "~3.2.3",
    "inherits": "~2.0.1",
    "ltgt": "~2.2.0",
    "safe-buffer": "~5.1.1"
  },
  "description": "An drop-in replacement for LevelDOWN that works in memory only",
  "devDependencies": {
    "airtap": "^0.0.5",
    "faucet": "^0.0.1",
    "istanbul": "^0.4.2",
    "istanbul-coveralls": "^1.0.3",
    "rimraf": "^2.6.2",
    "standard": "^11.0.0",
    "tape": "^4.8.0"
  },
  "engines": {
    "node": ">=6"
  },
  "files": [
    "UPGRADING.md",
    "immediate-browser.js",
    "immediate.js",
    "memdown.js"
  ],
  "homepage": "https://github.com/Level/memdown",
  "keywords": [
    "leveldb",
    "leveldown",
    "levelup",
    "memory"
  ],
  "license": "MIT",
  "main": "memdown.js",
  "name": "memdown",
  "optionalDependencies": {},
  "readme": "# memdown\n\n> In-memory [`abstract-leveldown`] store for Node.js and browsers.\n\n[![level badge][level-badge]](https://github.com/level/awesome)\n[![npm](https://img.shields.io/npm/v/memdown.svg)](https://www.npmjs.com/package/memdown)\n![Node version](https://img.shields.io/node/v/memdown.svg)\n[![Travis](https://secure.travis-ci.org/Level/memdown.svg?branch=master)](http://travis-ci.org/Level/memdown)\n[![Coverage Status](https://coveralls.io/repos/Level/memdown/badge.svg?branch=master&service=github)](https://coveralls.io/github/Level/memdown?branch=master)\n[![JavaScript Style Guide](https://img.shields.io/badge/code_style-standard-brightgreen.svg)](https://standardjs.com)\n[![npm](https://img.shields.io/npm/dm/memdown.svg)](https://www.npmjs.com/package/memdown)\n\n## Example\n\n**If you are upgrading:** please see the [upgrade guide](./UPGRADING.md).\n\n```js\nconst levelup = require('levelup')\nconst memdown = require('memdown')\n\nconst db = levelup(memdown())\n\ndb.put('hey', 'you', (err) => {\n  if (err) throw err\n\n  db.get('hey', { asBuffer: false }, (err, value) => {\n    if (err) throw err\n    console.log(value) // 'you'\n  })\n})\n```\n\nYour data is discarded when the process ends or you release a reference to the store. Note as well, though the internals of `memdown` operate synchronously - [`levelup`] does not.\n\n## Browser support\n\n[![Sauce Test Status](https://saucelabs.com/browser-matrix/level-ci.svg)](https://saucelabs.com/u/level-ci)\n\n`memdown` requires a ES5-capable browser. If you're using one that's isn't (e.g. PhantomJS, Android < 4.4, IE < 10) then you will need [es5-shim](https://github.com/es-shims/es5-shim).\n\n## Data types\n\nUnlike [`leveldown`], `memdown` does not stringify keys or values. This means that in addition to Buffers, you can store any JS type without the need for [`encoding-down`]. For keys for example, you could use Buffers or strings, which sort lexicographically, or numbers, even Dates, which sort naturally. The only exceptions are `null` and `undefined`. Keys of that type are rejected; values of that type are converted to empty strings.\n\n```js\nconst db = levelup(memdown())\n\ndb.put(12, true, (err) => {\n  if (err) throw err\n\n  db.createReadStream({\n    keyAsBuffer: false,\n    valueAsBuffer: false\n  }).on('data', (entry) => {\n    console.log(typeof entry.key) // 'number'\n    console.log(typeof entry.value) // 'boolean'\n  })\n})\n```\n\nIf you desire normalization for keys and values (e.g. to stringify numbers), wrap `memdown` with [`encoding-down`]. Alternatively install [`level-mem`] which conveniently bundles [`levelup`], `memdown` and [`encoding-down`]. Such an approach is also recommended if you want to achieve universal (isomorphic) behavior. For example, you could have [`leveldown`] in a backend and `memdown` in the frontend.\n\n```js\nconst encode = require('encoding-down')\nconst db = levelup(encode(memdown()))\n\ndb.put(12, true, (err) => {\n  if (err) throw err\n\n  db.createReadStream({\n    keyAsBuffer: false,\n    valueAsBuffer: false\n  }).on('data', (entry) => {\n    console.log(typeof entry.key) // 'string'\n    console.log(typeof entry.value) // 'string'\n  })\n})\n```\n\n## Snapshot guarantees\n\nA `memdown` store is backed by [a fully persistent data structure](https://www.npmjs.com/package/functional-red-black-tree) and thus has snapshot guarantees. Meaning that reads operate on a snapshot in time, unaffected by simultaneous writes. Do note `memdown` cannot uphold this guarantee for (copies of) object references. If you store object values, be mindful of mutating referenced objects:\n\n```js\nconst db = levelup(memdown())\nconst obj = { thing: 'original' }\n\ndb.put('key', obj, (err) => {\n  obj.thing = 'modified'\n\n  db.get('key', { asBuffer: false }, (err, value) => {\n    console.log(value === obj) // true\n    console.log(value.thing) // 'modified'\n  })\n})\n```\n\nConversely, when `memdown` is wrapped with [`encoding-down`] it stores representations rather than references.\n\n```js\nconst encode = require('encoding-down')\n\nconst db = levelup(encode(memdown(), { valueEncoding: 'json' }))\nconst obj = { thing: 'original' }\n\ndb.put('key', obj, (err) => {\n  obj.thing = 'modified'\n\n  db.get('key', { asBuffer: false }, (err, value) => {\n    console.log(value === obj) // false\n    console.log(value.thing) // 'original'\n  })\n})\n```\n\n## Test\n\nIn addition to the regular `npm test`, you can test `memdown` in a browser of choice with:\n\n    npm run test-browser-local\n\nTo check code coverage:\n\n    npm run coverage\n\n## License\n\n`memdown` is Copyright (c) 2013-2018 Rod Vagg [@rvagg](https://twitter.com/rvagg) and licensed under the MIT license. All rights not explicitly granted in the MIT license are reserved. See the included LICENSE file for more details.\n\n[`abstract-leveldown`]: https://github.com/Level/abstract-leveldown\n[`levelup`]: https://github.com/Level/levelup\n[`encoding-down`]: https://github.com/Level/encoding-down\n[`leveldown`]: https://github.com/Level/leveldown\n[`level-mem`]: https://github.com/Level/mem\n[level-badge]: http://leveldb.org/img/badge.svg\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/Level/memdown.git"
  },
  "scripts": {
    "coverage": "istanbul cover -i memdown.js ./node_modules/.bin/tape ./test.js && istanbul check-coverage --lines 90 --function 80 --statements 90 --branches 80",
    "report-coverage": "npm run coverage && istanbul-coveralls",
    "test": "standard && node test.js | faucet",
    "test-browser-local": "airtap --no-coverage --local 9000 test.js",
    "test-browsers": "airtap --sauce-connect --loopback airtap.local --no-coverage test.js"
  },
  "version": "3.0.0"
}
