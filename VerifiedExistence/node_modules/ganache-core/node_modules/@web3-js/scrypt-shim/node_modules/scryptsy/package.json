{
  "_args": [
    [
      "scryptsy@https://registry.npmjs.org/scryptsy/-/scryptsy-2.1.0.tgz",
      "/home/dominik/blockchain/DocProof/node_modules/ganache-core/node_modules/@web3-js/scrypt-shim"
    ]
  ],
  "_from": "scryptsy@https://registry.npmjs.org/scryptsy/-/scryptsy-2.1.0.tgz",
  "_id": "scryptsy@2.1.0",
  "_inCache": true,
  "_location": "/ganache-core/@web3-js/scrypt-shim/scryptsy",
  "_phantomChildren": {},
  "_requested": {
    "name": "scryptsy",
    "raw": "scryptsy@https://registry.npmjs.org/scryptsy/-/scryptsy-2.1.0.tgz",
    "rawSpec": "https://registry.npmjs.org/scryptsy/-/scryptsy-2.1.0.tgz",
    "scope": null,
    "spec": "https://registry.npmjs.org/scryptsy/-/scryptsy-2.1.0.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "/ganache-core/@web3-js/scrypt-shim"
  ],
  "_resolved": "https://registry.npmjs.org/scryptsy/-/scryptsy-2.1.0.tgz",
  "_shasum": "8d1e8d0c025b58fdd25b6fa9a0dc905ee8faa790",
  "_shrinkwrap": null,
  "_spec": "scryptsy@https://registry.npmjs.org/scryptsy/-/scryptsy-2.1.0.tgz",
  "_where": "/home/dominik/blockchain/DocProof/node_modules/ganache-core/node_modules/@web3-js/scrypt-shim",
  "author": "",
  "bugs": {
    "url": "https://github.com/cryptocoinjs/scryptsy/issues"
  },
  "dependencies": {},
  "description": "Pure JavaScript implementation of the scrypt key deriviation function that is fully compatible with Node.js and the browser.",
  "devDependencies": {
    "coveralls": "^3.0.3",
    "mocha": "^6.0.2",
    "mochify": "^6.1.0",
    "nyc": "^13.3.0",
    "standard": "^12.0.1"
  },
  "files": [
    "lib"
  ],
  "homepage": "https://github.com/cryptocoinjs/scryptsy#readme",
  "keywords": [
    "bip38",
    "bitcoin",
    "cryptography",
    "crytpo",
    "dogecoin",
    "kdf",
    "litecoin",
    "scrypt"
  ],
  "license": "MIT",
  "main": "lib/index.js",
  "name": "scryptsy",
  "optionalDependencies": {},
  "readme": "scryptsy\n========\n\n[![build status](https://secure.travis-ci.org/cryptocoinjs/scryptsy.svg)](http://travis-ci.org/cryptocoinjs/scryptsy)\n[![Coverage Status](https://img.shields.io/coveralls/cryptocoinjs/scryptsy.svg)](https://coveralls.io/r/cryptocoinjs/scryptsy)\n[![Version](http://img.shields.io/npm/v/scryptsy.svg)](https://www.npmjs.org/package/scryptsy)\n\n`scryptsy` is a pure Javascript implementation of the [scrypt][wiki] key derivation function that is fully compatible with Node.js and the browser (via Browserify).\n\n\nWhy?\n----\n\n`Scrypt` is an integral part of many crypto currencies. It's a part of the [BIP38](https://github.com/bitcoin/bips/blob/master/bip-0038.mediawiki) standard for encrypting private Bitcoin keys. It also serves as the [proof-of-work system](http://en.wikipedia.org/wiki/Proof-of-work_system) for many crypto currencies, most notably: Litecoin and Dogecoin.\n\n\n\nInstallation\n------------\n\n    npm install --save scryptsy\n\n\n\nBrowserify Note\n------------\n\nWhen using a browserified bundle, be sure to add `setImmediate` as a shim.\n\n\n\nExample\n-------\n\n```js\nconst scrypt = require('scryptsy')\n\nasync function main () {\n  var key = \"pleaseletmein\"\n  var salt = \"SodiumChloride\"\n  var data1 = scrypt(key, salt, 16384, 8, 1, 64)\n  console.log(data1.toString('hex'))\n  // => 7023bdcb3afd7348461c06cd81fd38ebfda8fbba904f8e3ea9b543f6545da1f2d5432955613f0fcf62d49705242a9af9e61e85dc0d651e40dfcf017b45575887\n\n  // async is actually slower, but it will free up the event loop occasionally\n  // which will allow for front end GUI elements to update and cause it to not\n  // freeze up.\n  // See benchmarks below\n  // Passing 300 below means every 300 iterations internally will call setImmediate once\n  var data2 = await scrypt.async(key, salt, 16384, 8, 1, 64, undefined, 300)\n  console.log(data2.toString('hex'))\n  // => 7023bdcb3afd7348461c06cd81fd38ebfda8fbba904f8e3ea9b543f6545da1f2d5432955613f0fcf62d49705242a9af9e61e85dc0d651e40dfcf017b45575887\n}\nmain().catch(console.error)\n```\n\n\nBenchmarks\n-------\n\nInternal iterations are N * p, so changing r doesn't affect the number of calls to setImmediate.\nDecreasing pI decreases performance in exchange for more frequently freeing the event loop.\n(pI Default is 5000 loops per setImmediate call)\n\nNote: these benchmarks were done on node v10 on a CPU with good single thread performance.\nbrowsers show a much larger difference. Please tinker with the pI setting to balance between\nperformance and GUI responsiveness.\n\nIf `pI >= N`, setImmediate will only be called `p * 2` times total (on the i = 0 of each for loop).\n\n```\n---------------------------\ntime    : type : (N,r,p,pI) (pI = promiseInterval)\n---------------------------\n2266 ms :  sync (2^16,16,1)\n2548 ms : async (2^16,16,1,5000)\n12.44% increase\n---------------------------\n2616 ms :  sync (2^16,1,16)\n2995 ms : async (2^16,1,16,5000)\n14.49% increase\n---------------------------\n2685 ms :  sync (2^20,1,1)\n3090 ms : async (2^20,1,1,5000)\n15.08% increase\n---------------------------\n2235 ms :  sync (2^16,16,1)\n2627 ms : async (2^16,16,1,10)\n17.54% increase\n---------------------------\n2592 ms :  sync (2^16,1,16)\n3305 ms : async (2^16,1,16,10)\n27.51% increase\n---------------------------\n2705 ms :  sync (2^20,1,1)\n3363 ms : async (2^20,1,1,10)\n24.33% increase\n---------------------------\n2278 ms :  sync (2^16,16,1)\n2773 ms : async (2^16,16,1,1)\n21.73% increase\n---------------------------\n2617 ms :  sync (2^16,1,16)\n5632 ms : async (2^16,1,16,1)\n115.21% increase\n---------------------------\n2727 ms :  sync (2^20,1,1)\n5723 ms : async (2^20,1,1,1)\n109.86% increase\n---------------------------\n```\n\nAPI\n---\n\n### scrypt(key, salt, N, r, p, keyLenBytes, [progressCallback])\n\n- **key**: The key. Either `Buffer` or `string`.\n- **salt**: The salt. Either `Buffer` or `string`.\n- **N**: The number of iterations. `number` (integer)\n- **r**: Memory factor. `number` (integer)\n- **p**: Parallelization factor. `number` (integer)\n- **keyLenBytes**: The number of bytes to return. `number` (integer)\n- **progressCallback**: Call callback on every `1000` ops. Passes in `{current, total, percent}` as first parameter to `progressCallback()`.\n\nReturns `Buffer`.\n\n### scrypt.async(key, salt, N, r, p, keyLenBytes, [progressCallback, promiseInterval])\n\n- **key**: The key. Either `Buffer` or `string`.\n- **salt**: The salt. Either `Buffer` or `string`.\n- **N**: The number of iterations. `number` (integer)\n- **r**: Memory factor. `number` (integer)\n- **p**: Parallelization factor. `number` (integer)\n- **keyLenBytes**: The number of bytes to return. `number` (integer)\n- **progressCallback**: Call callback on every `1000` ops. Passes in `{current, total, percent}` as first parameter to `progressCallback()`.\n- **promiseInterval**: The number of internal iterations before calling setImmediate once to free the event loop.\n\nReturns `Promise<Buffer>`.\n\n\n\nResources\n---------\n- [Tarsnap Blurb on Scrypt][tarsnap]\n- [Scrypt Whitepaper](http://www.tarsnap.com/scrypt/scrypt.pdf)\n- [IETF Scrypt](https://tools.ietf.org/html/draft-josefsson-scrypt-kdf-00) (Test vector params are [incorrect](https://twitter.com/dchest/status/247734446881640448).)\n\n\nLicense\n-------\n\nMIT\n\n\n[wiki]: http://en.wikipedia.org/wiki/Scrypt\n[tarsnap]: http://www.tarsnap.com/scrypt.html\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/cryptocoinjs/scryptsy.git"
  },
  "scripts": {
    "browser-test": "mochify --wd -R spec",
    "coverage": "nyc --check-coverage --statements 80 --branches 60 --functions 90 --lines 90 mocha",
    "coveralls": "npm run-script coverage && coveralls < coverage/lcov.info",
    "lint": "standard",
    "test": "mocha --ui bdd",
    "unit": "mocha"
  },
  "version": "2.1.0"
}
