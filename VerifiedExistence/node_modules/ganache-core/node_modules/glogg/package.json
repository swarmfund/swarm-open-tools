{
  "_args": [
    [
      "glogg@https://registry.npmjs.org/glogg/-/glogg-1.0.2.tgz",
      "/home/dominik/blockchain/DocProof/node_modules/ganache-core"
    ]
  ],
  "_from": "glogg@https://registry.npmjs.org/glogg/-/glogg-1.0.2.tgz",
  "_id": "glogg@1.0.2",
  "_inCache": true,
  "_location": "/ganache-core/glogg",
  "_phantomChildren": {},
  "_requested": {
    "name": "glogg",
    "raw": "glogg@https://registry.npmjs.org/glogg/-/glogg-1.0.2.tgz",
    "rawSpec": "https://registry.npmjs.org/glogg/-/glogg-1.0.2.tgz",
    "scope": null,
    "spec": "https://registry.npmjs.org/glogg/-/glogg-1.0.2.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "/ganache-core/gulplog"
  ],
  "_resolved": "https://registry.npmjs.org/glogg/-/glogg-1.0.2.tgz",
  "_shasum": "2d7dd702beda22eb3bffadf880696da6d846313f",
  "_shrinkwrap": null,
  "_spec": "glogg@https://registry.npmjs.org/glogg/-/glogg-1.0.2.tgz",
  "_where": "/home/dominik/blockchain/DocProof/node_modules/ganache-core",
  "author": {
    "email": "team@gulpjs.com",
    "name": "Gulp Team",
    "url": "http://gulpjs.com/"
  },
  "bugs": {
    "url": "https://github.com/gulpjs/glogg/issues"
  },
  "contributors": [
    {
      "name": "Blaine Bublitz",
      "email": "blaine.bublitz@gmail.com"
    }
  ],
  "dependencies": {
    "sparkles": "^1.0.0"
  },
  "description": "Global logging utility",
  "devDependencies": {
    "eslint": "^2.13.0",
    "eslint-config-gulp": "^3.0.1",
    "expect": "^1.20.2",
    "istanbul": "^0.4.3",
    "istanbul-coveralls": "^1.0.3",
    "mocha": "^3.5.3"
  },
  "engines": {
    "node": ">= 0.10"
  },
  "files": [
    "LICENSE",
    "index.js"
  ],
  "homepage": "https://github.com/gulpjs/glogg#readme",
  "keywords": [
    "global",
    "log",
    "logger",
    "logging",
    "shared"
  ],
  "license": "MIT",
  "main": "index.js",
  "name": "glogg",
  "optionalDependencies": {},
  "readme": "<p align=\"center\">\n  <a href=\"http://gulpjs.com\">\n    <img height=\"257\" width=\"114\" src=\"https://raw.githubusercontent.com/gulpjs/artwork/master/gulp-2x.png\">\n  </a>\n</p>\n\n# glogg\n\n[![NPM version][npm-image]][npm-url] [![Downloads][downloads-image]][npm-url] [![Travis Build Status][travis-image]][travis-url] [![AppVeyor Build Status][appveyor-image]][appveyor-url] [![Coveralls Status][coveralls-image]][coveralls-url] [![Gitter chat][gitter-image]][gitter-url]\n\nGlobal logging utility.\n\n## Usage\n\n```js\nvar getLogger = require('glogg');\n\nvar logger = getLogger('my-namespace');\n\n// logs strings\nlogger.debug('The MOST verbose!');\nlogger.info('Some important info');\nlogger.warn('All the warnings to you');\nlogger.error('OH NO! SOMETHING HAPPENED!');\n\n// supports util.format!\nlogger.info('%s style!', 'printf');\n\n// log anything\nlogger.debug({ my: 'obj' });\nlogger.info([1, 2, 3]);\n\n// somewhere else\nlogger.on('info', function(msg){\n  // do something with msg\n});\n\n// must be handled to avoid crashing process\nlogger.on('error', function(msg){\n  // now it won't crash\n});\n```\n\n## API\n\n__Note: This module makes no assumptions about the log levels and they will always\nbe emitted.  If you are looking to filter some out, your listeners will need to have\nextra logic.__\n\n### getLogger([namespace])\n\nCreate a new logger at the given namespace (or the default if no namespace is provided).\nReturns an augmented [`sparkles`](https://github.com/phated/sparkles) EventEmitter object\nwith 4 methods: `debug()`, `info()`, `warn()` and `error()`. When called, these methods emit\nan event with the same name.  If the first argument is a string, the arguments\nare passed through node's `util.format()` before being emitted.  Other parts\nof a node program can get the logger by namespace and listen for the events to\nbe emitted.\n\n#### logger.debug(msg)\n\nEmits a `debug` event with the given `msg`.\n\nIf the first argument is a string, all arguments are passed to node's\n`util.format()` before being emitted.\n\n#### logger.info(msg)\n\nEmits a `info` event with the given `msg`.\n\nIf the first argument is a string, all arguments are passed to node's\n`util.format()` before being emitted.\n\n#### logger.warn(msg)\n\nEmits a `warn` event with the given `msg`.\n\nIf the first argument is a string, all arguments are passed to node's\n`util.format()` before being emitted.\n\n#### logger.error(msg)\n\nEmits a `error` event with the given `msg`.\n\nIf the first argument is a string, all arguments are passed to node's\n`util.format()` before being emitted.\n\n__Note: You must handle this event in some way or the node process will crash\nwhen an `error` event is emitted.__\n\n#### logger.on(event, fn)\n\nStandard API from node's `EventEmitter`.  Use this to listen for events from\nthe logger methods.\n\n## License\n\nMIT\n\n[downloads-image]: http://img.shields.io/npm/dm/glogg.svg\n[npm-url]: https://www.npmjs.com/package/glogg\n[npm-image]: http://img.shields.io/npm/v/glogg.svg\n\n[travis-url]: https://travis-ci.org/gulpjs/glogg\n[travis-image]: http://img.shields.io/travis/gulpjs/glogg.svg?label=travis-ci\n\n[appveyor-url]: https://ci.appveyor.com/project/gulpjs/glogg\n[appveyor-image]: https://img.shields.io/appveyor/ci/gulpjs/glogg.svg?label=appveyor\n\n[coveralls-url]: https://coveralls.io/r/gulpjs/glogg\n[coveralls-image]: http://img.shields.io/coveralls/gulpjs/glogg/master.svg\n\n[gitter-url]: https://gitter.im/gulpjs/gulp\n[gitter-image]: https://badges.gitter.im/gulpjs/gulp.svg\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/gulpjs/glogg.git"
  },
  "scripts": {
    "cover": "istanbul cover _mocha --report lcovonly",
    "coveralls": "npm run cover && istanbul-coveralls",
    "lint": "eslint .",
    "pretest": "npm run lint",
    "test": "mocha --async-only"
  },
  "version": "1.0.2"
}
