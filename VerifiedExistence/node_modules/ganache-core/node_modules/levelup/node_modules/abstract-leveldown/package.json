{
  "_args": [
    [
      "abstract-leveldown@https://registry.npmjs.org/abstract-leveldown/-/abstract-leveldown-5.0.0.tgz",
      "/home/dominik/blockchain/DocProof/node_modules/ganache-core/node_modules/levelup"
    ]
  ],
  "_from": "abstract-leveldown@https://registry.npmjs.org/abstract-leveldown/-/abstract-leveldown-5.0.0.tgz",
  "_id": "abstract-leveldown@5.0.0",
  "_inCache": true,
  "_location": "/ganache-core/levelup/abstract-leveldown",
  "_phantomChildren": {},
  "_requested": {
    "name": "abstract-leveldown",
    "raw": "abstract-leveldown@https://registry.npmjs.org/abstract-leveldown/-/abstract-leveldown-5.0.0.tgz",
    "rawSpec": "https://registry.npmjs.org/abstract-leveldown/-/abstract-leveldown-5.0.0.tgz",
    "scope": null,
    "spec": "https://registry.npmjs.org/abstract-leveldown/-/abstract-leveldown-5.0.0.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "/ganache-core/levelup/deferred-leveldown"
  ],
  "_resolved": "https://registry.npmjs.org/abstract-leveldown/-/abstract-leveldown-5.0.0.tgz",
  "_shasum": "f7128e1f86ccabf7d2893077ce5d06d798e386c6",
  "_shrinkwrap": null,
  "_spec": "abstract-leveldown@https://registry.npmjs.org/abstract-leveldown/-/abstract-leveldown-5.0.0.tgz",
  "_where": "/home/dominik/blockchain/DocProof/node_modules/ganache-core/node_modules/levelup",
  "browser": {
    "rimraf": false
  },
  "bugs": {
    "url": "https://github.com/level/abstract-leveldown/issues"
  },
  "contributors": [
    {
      "name": "Julian Gruber",
      "email": "julian@juliangruber.com",
      "url": "https://github.com/juliangruber"
    },
    {
      "name": "Rod Vagg",
      "email": "r@va.gg",
      "url": "https://github.com/rvagg"
    },
    {
      "name": "Jake Verbaten",
      "email": "raynos2@gmail.com",
      "url": "https://github.com/raynos"
    },
    {
      "name": "Dominic Tarr",
      "email": "dominic.tarr@gmail.com",
      "url": "https://github.com/dominictarr"
    },
    {
      "name": "Max Ogden",
      "email": "max@maxogden.com",
      "url": "https://github.com/maxogden"
    },
    {
      "name": "Lars-Magnus Skog",
      "email": "ralphtheninja@riseup.net",
      "url": "https://github.com/ralphtheninja"
    },
    {
      "name": "David BjÃ¶rklund",
      "email": "david.bjorklund@gmail.com",
      "url": "https://github.com/kesla"
    },
    {
      "name": "John Chesley",
      "email": "john@chesl.es",
      "url": "https://github.com/chesles/"
    },
    {
      "name": "Paolo Fragomeni",
      "email": "paolo@async.ly",
      "url": "https://github.com/hij1nx"
    },
    {
      "name": "Anton Whalley",
      "email": "anton.whalley@nearform.com",
      "url": "https://github.com/No9"
    },
    {
      "name": "Matteo Collina",
      "email": "matteo.collina@gmail.com",
      "url": "https://github.com/mcollina"
    },
    {
      "name": "Pedro Teixeira",
      "email": "pedro.teixeira@gmail.com",
      "url": "https://github.com/pgte"
    },
    {
      "name": "James Halliday",
      "email": "mail@substack.net",
      "url": "https://github.com/substack"
    },
    {
      "name": "Thomas Watson Steen",
      "email": "w@tson.dk",
      "url": "https://github.com/watson"
    },
    {
      "name": "Vincent Weevers",
      "email": "mail@vincentweevers.nl",
      "url": "https://github.com/vweevers"
    }
  ],
  "dependencies": {
    "xtend": "~4.0.0"
  },
  "description": "An abstract prototype matching the LevelDOWN API",
  "devDependencies": {
    "airtap": "0.0.5",
    "rimraf": "^2.6.1",
    "sinon": "^5.0.0",
    "standard": "^11.0.0",
    "tape": "^4.7.0"
  },
  "engines": {
    "node": ">=6"
  },
  "homepage": "https://github.com/level/abstract-leveldown",
  "keywords": [
    "leveldb",
    "leveldown",
    "levelup"
  ],
  "license": "MIT",
  "main": "index.js",
  "name": "abstract-leveldown",
  "optionalDependencies": {},
  "readme": "# abstract-leveldown\n\n> An abstract prototype matching the [`leveldown`](https://github.com/level/leveldown/) API. Useful for extending [`levelup`](https://github.com/level/levelup) functionality by providing a replacement to `leveldown`.\n\n[![level badge][level-badge]](https://github.com/level/awesome)\n[![npm](https://img.shields.io/npm/v/abstract-leveldown.svg)](https://www.npmjs.com/package/abstract-leveldown)\n![Node version](https://img.shields.io/node/v/abstract-leveldown.svg)\n[![Travis](https://travis-ci.org/Level/abstract-leveldown.svg?branch=master)](http://travis-ci.org/Level/abstract-leveldown)\n[![david](https://david-dm.org/Level/abstract-leveldown.svg)](https://david-dm.org/level/abstract-leveldown)\n[![JavaScript Style Guide](https://img.shields.io/badge/code_style-standard-brightgreen.svg)](https://standardjs.com)\n[![npm](https://img.shields.io/npm/dm/abstract-leveldown.svg)](https://www.npmjs.com/package/abstract-leveldown)\n\n`abstract-leveldown` provides a simple, operational *noop* base prototype that's ready for extending. By default, all operations have sensible \"noops\" (operations that essentially do nothing). For example, simple operations such as `.open(callback)` and `.close(callback)` will simply invoke the callback (on a *next tick*). More complex operations  perform sensible actions, for example: `.get(key, callback)` will always return a `'NotFound'` `Error` on the callback.\n\nYou add functionality by implementing the underscore versions of the operations. For example, to implement a `put()` operation you add a `_put()` method to your object. Each of these underscore methods override the default *noop* operations and are always provided with **consistent arguments**, regardless of what is passed in by the client.\n\nAdditionally, all methods provide argument checking and sensible defaults for optional arguments. All bad-argument errors are compatible with `leveldown` (they pass the `leveldown` method arguments tests). For example, if you call `.open()` without a callback argument you'll get an `Error('open() requires a callback argument')`. Where optional arguments are involved, your underscore methods will receive sensible defaults. A `.get(key, callback)` will pass through to a `._get(key, options, callback)` where the `options` argument is an empty object.\n\n**If you are upgrading:** please see [UPGRADING.md](UPGRADING.md).\n\n## Example\n\nA simplistic in-memory `leveldown` replacement\n\n```js\nvar util = require('util')\nvar AbstractLevelDOWN = require('./').AbstractLevelDOWN\n\n// constructor, passes through the 'location' argument to the AbstractLevelDOWN constructor\nfunction FakeLevelDOWN (location) {\n  AbstractLevelDOWN.call(this, location)\n}\n\n// our new prototype inherits from AbstractLevelDOWN\nutil.inherits(FakeLevelDOWN, AbstractLevelDOWN)\n\n// implement some methods\n\nFakeLevelDOWN.prototype._open = function (options, callback) {\n  // initialise a memory storage object\n  this._store = {}\n  // optional use of nextTick to be a nice async citizen\n  process.nextTick(function () { callback(null, this) }.bind(this))\n}\n\nFakeLevelDOWN.prototype._put = function (key, value, options, callback) {\n  key = '_' + key // safety, to avoid key='__proto__'-type skullduggery\n  this._store[key] = value\n  process.nextTick(callback)\n}\n\nFakeLevelDOWN.prototype._get = function (key, options, callback) {\n  var value = this._store['_' + key]\n  if (value === undefined) {\n    // 'NotFound' error, consistent with LevelDOWN API\n    return process.nextTick(function () { callback(new Error('NotFound')) })\n  }\n  process.nextTick(function () {\n    callback(null, value)\n  })\n}\n\nFakeLevelDOWN.prototype._del = function (key, options, callback) {\n  delete this._store['_' + key]\n  process.nextTick(callback)\n}\n\n// Now use it with levelup\n\nvar levelup = require('levelup')\n\nvar db = levelup(new FakeLevelDOWN('/who/cares'))\n\ndb.put('foo', 'bar', function (err) {\n  if (err) throw err\n  db.get('foo', function (err, value) {\n    if (err) throw err\n    console.log('Got foo =', value)\n  })\n})\n```\n\nSee [`memdown`](https://github.com/Level/memdown/) if you are looking for a complete in-memory replacement for `leveldown`.\n\n## Browser support\n\n[![Sauce Test Status](https://saucelabs.com/browser-matrix/abstract-leveldown.svg)](https://saucelabs.com/u/abstract-leveldown)\n\n## Extensible API\n\nRemember that each of these methods, if you implement them, will receive exactly the number and order of arguments described. Optional arguments will be converted to sensible defaults.\n\n### `AbstractLevelDOWN(location)`\n### `AbstractLevelDOWN#status`\n\nAn `AbstractLevelDOWN` based database can be in one of the following states:\n\n* `'new'` - newly created, not opened or closed\n* `'opening'` - waiting for the database to be opened\n* `'open'` - successfully opened the database, available for use\n* `'closing'` - waiting for the database to be closed\n* `'closed'` - database has been successfully closed, should not be used\n\n### `AbstractLevelDOWN#_open(options, callback)`\n### `AbstractLevelDOWN#_close(callback)`\n### `AbstractLevelDOWN#_get(key, options, callback)`\n### `AbstractLevelDOWN#_put(key, value, options, callback)`\n### `AbstractLevelDOWN#_del(key, options, callback)`\n### `AbstractLevelDOWN#_batch(array, options, callback)`\n\nIf `batch()` is called without arguments or with only an options object then it should return a `Batch` object with chainable methods. Otherwise it will invoke a classic batch operation.\n\n### `AbstractLevelDOWN#_chainedBatch()`\n\nBy default a `batch()` operation without arguments returns a blank `AbstractChainedBatch` object. The prototype is available on the main exports for you to extend. If you want to implement chainable batch operations then you should extend the `AbstractChaindBatch` and return your object in the `_chainedBatch()` method.\n\n### `AbstractLevelDOWN#_serializeKey(key)`\n### `AbstractLevelDOWN#_serializeValue(value)`\n### `AbstractLevelDOWN#_iterator(options)`\n\nBy default an `iterator()` operation returns a blank `AbstractIterator` object. The prototype is available on the main exports for you to extend. If you want to implement iterator operations then you should extend the `AbstractIterator` and return your object in the `_iterator(options)` method.\n\nThe `iterator()` operation accepts the following range options:\n\n* `gt`\n* `gte`\n* `lt`\n* `lte`\n* `start` (legacy)\n* `end` (legacy)\n\nA range option that is either an empty buffer, an empty string or `null` will be ignored.\n\n`AbstractIterator` implements the basic state management found in LevelDOWN. It keeps track of when a `next()` is in progress and when an `end()` has been called so it doesn't allow concurrent `next()` calls, it does allow `end()` while a `next()` is in progress and it doesn't allow either `next()` or `end()` after `end()` has been called.\n\n### `AbstractIterator(db)`\n\nProvided with the current instance of `AbstractLevelDOWN` by default.\n\n### `AbstractIterator#_next(callback)`\n### `AbstractIterator#_end(callback)`\n\n### `AbstractChainedBatch`\nProvided with the current instance of `AbstractLevelDOWN` by default.\n\n### `AbstractChainedBatch#_put(key, value)`\n### `AbstractChainedBatch#_del(key)`\n### `AbstractChainedBatch#_clear()`\n### `AbstractChainedBatch#_write(options, callback)`\n### `AbstractChainedBatch#_serializeKey(key)`\n### `AbstractChainedBatch#_serializeValue(value)`\n\n<a name=\"contributing\"></a>\n## Contributing\n\n`abstract-leveldown` is an **OPEN Open Source Project**. This means that:\n\n> Individuals making significant and valuable contributions are given commit-access to the project to contribute as they see fit. This project is more like an open wiki than a standard guarded open source project.\n\nSee the [contribution guide](https://github.com/Level/community/blob/master/CONTRIBUTING.md) for more details.\n\n## Big Thanks\n\nCross-browser Testing Platform and Open Source â¥ Provided by [Sauce Labs](https://saucelabs.com).\n\n[![Sauce Labs logo](./sauce-labs.svg)](https://saucelabs.com)\n\n<a name=\"license\"></a>\n## License\n\nCopyright &copy; 2013-2018 `abstract-leveldown` [contributors](https://github.com/level/community#contributors).\n\n`abstract-leveldown` is licensed under the MIT license. All rights not explicitly granted in the MIT license are reserved. See the included `LICENSE.md` file for more details.\n\n[level-badge]: http://leveldb.org/img/badge.svg\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/level/abstract-leveldown.git"
  },
  "scripts": {
    "test": "standard && node test.js",
    "test-browser-local": "airtap --local --no-coverage test.js",
    "test-browsers": "airtap --sauce-connect --loopback airtap.local --no-coverage test.js"
  },
  "version": "5.0.0"
}
