{
  "_args": [
    [
      "looper@https://registry.npmjs.org/looper/-/looper-2.0.0.tgz",
      "/home/dominik/blockchain/DocProof/node_modules/ganache-core"
    ]
  ],
  "_from": "looper@https://registry.npmjs.org/looper/-/looper-2.0.0.tgz",
  "_id": "looper@2.0.0",
  "_inCache": true,
  "_location": "/ganache-core/looper",
  "_phantomChildren": {},
  "_requested": {
    "name": "looper",
    "raw": "looper@https://registry.npmjs.org/looper/-/looper-2.0.0.tgz",
    "rawSpec": "https://registry.npmjs.org/looper/-/looper-2.0.0.tgz",
    "scope": null,
    "spec": "https://registry.npmjs.org/looper/-/looper-2.0.0.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "/ganache-core/pull-window"
  ],
  "_resolved": "https://registry.npmjs.org/looper/-/looper-2.0.0.tgz",
  "_shasum": "66cd0c774af3d4fedac53794f742db56da8f09ec",
  "_shrinkwrap": null,
  "_spec": "looper@https://registry.npmjs.org/looper/-/looper-2.0.0.tgz",
  "_where": "/home/dominik/blockchain/DocProof/node_modules/ganache-core",
  "author": {
    "email": "dominic.tarr@gmail.com",
    "name": "Dominic Tarr",
    "url": "http://dominictarr.com"
  },
  "bugs": {
    "url": "https://github.com/dominictarr/looper/issues"
  },
  "dependencies": {},
  "description": "async loops that never RangeError",
  "devDependencies": {
    "tape": "1.0.4"
  },
  "homepage": "https://github.com/dominictarr/looper",
  "license": "MIT",
  "name": "looper",
  "optionalDependencies": {},
  "readme": "# looper\n\nLoop with callbacks but don't RangeError\n\n[![travis](https://travis-ci.org/dominictarr/looper.png?branch=master)\n](https://travis-ci.org/dominictarr/looper)\n\n[![testling](http://ci.testling.com/dominictarr/looper.png)\n](http://ci.testling.com/dominictarr/looper)\n\n## Synopsis\n\nNormally, if `mightBeAsync` calls it's cb immediately\nthis would `RangeError`:\n\n``` js\nvar l = 100000\n;(function next () {\n  if(--l) mightBeAsync(next)\n})\n```\n\n`looper` detects that case, and falls back to a `while` loop,\n\n## Example\n\n``` js\nvar loop = require('looper')\n\nvar l = 100000\nloop(function () {\n  var next = this\n  if(--l) probablySync(next)\n})()\n```\n\nwhen you want to stop looping, don't call `next`.\n`looper` checks if each callback is sync or not,\nso you can even mix sync and async calls!\n\n## License\n\nMIT\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/dominictarr/looper.git"
  },
  "scripts": {
    "test": "set -e; for t in test/*.js; do node $t; done"
  },
  "testling": {
    "browsers": [
      "android-browser/4.2..latest",
      "chrome/22..latest",
      "chrome/canary",
      "firefox/17..latest",
      "firefox/nightly",
      "ie/8..latest",
      "ipad/6.0..latest",
      "iphone/6.0..latest",
      "opera/12..latest",
      "opera/next",
      "safari/5.1..latest"
    ],
    "files": "test/*.js"
  },
  "version": "2.0.0"
}
