{
  "_args": [
    [
      "resolve-options@https://registry.npmjs.org/resolve-options/-/resolve-options-1.1.0.tgz",
      "/home/dominik/blockchain/DocProof/node_modules/ganache-core"
    ]
  ],
  "_from": "resolve-options@https://registry.npmjs.org/resolve-options/-/resolve-options-1.1.0.tgz",
  "_id": "resolve-options@1.1.0",
  "_inCache": true,
  "_location": "/ganache-core/resolve-options",
  "_phantomChildren": {},
  "_requested": {
    "name": "resolve-options",
    "raw": "resolve-options@https://registry.npmjs.org/resolve-options/-/resolve-options-1.1.0.tgz",
    "rawSpec": "https://registry.npmjs.org/resolve-options/-/resolve-options-1.1.0.tgz",
    "scope": null,
    "spec": "https://registry.npmjs.org/resolve-options/-/resolve-options-1.1.0.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "/ganache-core/vinyl-fs"
  ],
  "_resolved": "https://registry.npmjs.org/resolve-options/-/resolve-options-1.1.0.tgz",
  "_shasum": "32bb9e39c06d67338dc9378c0d6d6074566ad131",
  "_shrinkwrap": null,
  "_spec": "resolve-options@https://registry.npmjs.org/resolve-options/-/resolve-options-1.1.0.tgz",
  "_where": "/home/dominik/blockchain/DocProof/node_modules/ganache-core",
  "author": {
    "email": "team@gulpjs.com",
    "name": "Gulp Team",
    "url": "http://gulpjs.com/"
  },
  "bugs": {
    "url": "https://github.com/gulpjs/resolve-options/issues"
  },
  "contributors": [
    {
      "name": "Blaine Bublitz",
      "email": "blaine.bublitz@gmail.com"
    }
  ],
  "dependencies": {
    "value-or-function": "^3.0.0"
  },
  "description": "Resolve an options object based on configuration.",
  "devDependencies": {
    "eslint": "^1.10.3",
    "eslint-config-gulp": "^2.0.0",
    "expect": "^1.20.2",
    "istanbul": "^0.4.3",
    "istanbul-coveralls": "^1.0.3",
    "jscs": "^2.4.0",
    "jscs-preset-gulp": "^1.0.0",
    "mocha": "^3.2.0"
  },
  "engines": {
    "node": ">= 0.10"
  },
  "files": [
    "LICENSE",
    "index.js"
  ],
  "homepage": "https://github.com/gulpjs/resolve-options#readme",
  "keywords": [
    "config",
    "configuration",
    "default",
    "functions",
    "opt",
    "options",
    "opts",
    "resolver",
    "type"
  ],
  "license": "MIT",
  "main": "index.js",
  "name": "resolve-options",
  "optionalDependencies": {},
  "readme": "<p align=\"center\">\n  <a href=\"http://gulpjs.com\">\n    <img height=\"257\" width=\"114\" src=\"https://raw.githubusercontent.com/gulpjs/artwork/master/gulp-2x.png\">\n  </a>\n</p>\n\n# resolve-options\n\n[![NPM version][npm-image]][npm-url] [![Downloads][downloads-image]][npm-url] [![Build Status][travis-image]][travis-url] [![AppVeyor Build Status][appveyor-image]][appveyor-url] [![Coveralls Status][coveralls-image]][coveralls-url] [![Gitter chat][gitter-image]][gitter-url]\n\nResolve an options object based on configuration.\n\n## Usage\n\n```js\n// This example assumes a Vinyl file\n\nvar createResolver = require('resolve-options');\n\nvar config = {\n  cwd: {\n    type: 'string',\n    default: process.cwd\n  },\n  sourcemaps: {\n    type: 'boolean',\n    default: false\n  },\n  since: {\n    type: ['date', 'number']\n  },\n  read: {\n    type: 'boolean'\n  }\n};\n\nvar options = {\n  sourcemaps: true,\n  since: Date.now(),\n  read: function(file) {\n    return (file.extname !== '.mp4');\n  }\n};\n\nvar resolver = createResolver(config, options);\n\nvar cwd = resolver.resolve('cwd', file);\n// cwd === process.cwd()\n\nvar sourcemaps = resolver.resolve('sourcemaps', file);\n// sourcemaps === true\n\nvar read = resolver.resolve('read', file);\n// Given .mp4, read === false\n// Given .txt, read === true\n```\n\n## API\n\n### `createResolver([config,] [options])`\n\nTakes a `config` object that describes the options to accept/resolve and an `options` object (usually passed by a user) to resolve against the `config`. Returns a `resolver` that contains a `resolve` method for realtime resolution of options.\n\nThe `config` object takes the following structure:\n```graphql\nconfig {\n  [optionKey] {\n    type // string, array or function\n    default // any value or function\n  }\n}\n```\n\nEach option is represented by its `optionKey` in the `config` object. It must be an object with a `type` property.\n\nThe `type` property must be a string, array or function which will be passed to the [`value-or-function`][value-or-function] module (functions will be bound to the resolver to allow for dependent options).\n\nA `default` property may also be specified as a fallback if the option isn't available or is invalid. The `default` value can be any value or a function (functions will be bound to the resolver to allow for dependent defaults). __Note:__ `default` values are not type-validated by the `value-or-function` module.\n\n### `resolver.resolve(optionKey, [...arguments])`\n\nTakes an `optionKey` string and any number of `arguments` to apply if an option is a function. Returns the resolved value for the `optionKey`.\n\n## License\n\nMIT\n\n[value-or-function]: https://github.com/gulpjs/value-or-function\n\n[downloads-image]: http://img.shields.io/npm/dm/resolve-options.svg\n[npm-url]: https://npmjs.com/package/resolve-options\n[npm-image]: http://img.shields.io/npm/v/resolve-options.svg\n\n[travis-url]: https://travis-ci.org/gulpjs/resolve-options\n[travis-image]: http://img.shields.io/travis/gulpjs/resolve-options.svg?label=travis-ci\n\n[appveyor-url]: https://ci.appveyor.com/project/gulpjs/resolve-options\n[appveyor-image]: https://img.shields.io/appveyor/ci/gulpjs/resolve-options.svg?label=appveyor\n\n[coveralls-url]: https://coveralls.io/r/gulpjs/resolve-options\n[coveralls-image]: http://img.shields.io/coveralls/gulpjs/resolve-options/master.svg\n\n[gitter-url]: https://gitter.im/gulpjs/gulp\n[gitter-image]: https://badges.gitter.im/gulpjs/gulp.png\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/gulpjs/resolve-options.git"
  },
  "scripts": {
    "cover": "istanbul cover _mocha --report lcovonly",
    "coveralls": "npm run cover && istanbul-coveralls",
    "lint": "eslint index.js test/ && jscs index.js test/",
    "pretest": "npm run lint",
    "test": "mocha --async-only"
  },
  "version": "1.1.0"
}
