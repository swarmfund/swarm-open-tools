{
  "_args": [
    [
      "ethereumjs-vm@https://registry.npmjs.org/ethereumjs-vm/-/ethereumjs-vm-4.1.3.tgz",
      "/home/dominik/blockchain/DocProof/node_modules/ganache-core"
    ]
  ],
  "_from": "ethereumjs-vm@https://registry.npmjs.org/ethereumjs-vm/-/ethereumjs-vm-4.1.3.tgz",
  "_id": "ethereumjs-vm@4.1.3",
  "_inCache": true,
  "_location": "/ganache-core/ethereumjs-vm",
  "_phantomChildren": {
    "@types/bn.js": "4.11.6",
    "bindings": "1.5.0",
    "bn.js": "4.11.8",
    "create-hash": "1.2.0",
    "ethjs-util": "0.1.6",
    "inherits": "2.0.4",
    "rlp": "2.2.4",
    "safe-buffer": "5.2.0",
    "secp256k1": "3.8.0"
  },
  "_requested": {
    "name": "ethereumjs-vm",
    "raw": "ethereumjs-vm@https://registry.npmjs.org/ethereumjs-vm/-/ethereumjs-vm-4.1.3.tgz",
    "rawSpec": "https://registry.npmjs.org/ethereumjs-vm/-/ethereumjs-vm-4.1.3.tgz",
    "scope": null,
    "spec": "https://registry.npmjs.org/ethereumjs-vm/-/ethereumjs-vm-4.1.3.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "/ganache-core"
  ],
  "_resolved": "https://registry.npmjs.org/ethereumjs-vm/-/ethereumjs-vm-4.1.3.tgz",
  "_shasum": "dc8eb45f47d775da9f0b2437d5e20896fdf66f37",
  "_shrinkwrap": null,
  "_spec": "ethereumjs-vm@https://registry.npmjs.org/ethereumjs-vm/-/ethereumjs-vm-4.1.3.tgz",
  "_where": "/home/dominik/blockchain/DocProof/node_modules/ganache-core",
  "author": {
    "email": "mjbecze@gmail.com",
    "name": "mjbecze"
  },
  "bugs": {
    "url": "https://github.com/ethereumjs/ethereumjs-vm/issues"
  },
  "contributors": [
    {
      "name": "Alex Beregszaszi",
      "email": "alex@rtfs.hu"
    }
  ],
  "dependencies": {
    "async": "^2.1.2",
    "async-eventemitter": "^0.2.2",
    "core-js-pure": "^3.0.1",
    "ethereumjs-account": "^3.0.0",
    "ethereumjs-block": "^2.2.2",
    "ethereumjs-blockchain": "^4.0.3",
    "ethereumjs-common": "^1.5.0",
    "ethereumjs-tx": "^2.1.2",
    "ethereumjs-util": "^6.2.0",
    "fake-merkle-patricia-tree": "^1.0.1",
    "functional-red-black-tree": "^1.0.1",
    "merkle-patricia-tree": "^2.3.2",
    "rustbn.js": "~0.2.0",
    "safe-buffer": "^5.1.1",
    "util.promisify": "^1.0.0"
  },
  "description": "An Ethereum VM implementation",
  "devDependencies": {
    "@ethereumjs/config-nyc": "^1.1.1",
    "@ethereumjs/config-prettier": "^1.1.1",
    "@ethereumjs/config-tsc": "^1.1.1",
    "@ethereumjs/config-tslint": "^1.1.1",
    "@types/bn.js": "^4.11.5",
    "@types/core-js": "^2.5.0",
    "@types/lru-cache": "^5.1.0",
    "@types/node": "^11.13.4",
    "browserify": "^16.2.3",
    "ethereumjs-testing": "git+https://github.com/ethereumjs/ethereumjs-testing.git#v1.3.0",
    "husky": "^2.1.0",
    "karma": "^4.0.1",
    "karma-browserify": "^6.0.0",
    "karma-chrome-launcher": "^2.2.0",
    "karma-detect-browsers": "^2.3.3",
    "karma-firefox-launcher": "^1.1.0",
    "karma-tap": "^4.1.4",
    "level": "^4.0.0",
    "level-mem": "^3.0.1",
    "minimist": "^1.1.1",
    "nyc": "^12.0.2",
    "prettier": "^1.16.4",
    "rlp": "^2.2.3",
    "standard": "^10.0.0",
    "tap-spec": "^5.0.0",
    "tape": "4.6.3",
    "tslint": "^5.16.0",
    "typedoc": "^0.14.2",
    "typedoc-plugin-markdown": "^1.2.1",
    "typescript": "^3.4.3",
    "typestrict": "^1.0.2"
  },
  "files": [
    "dist/**/*"
  ],
  "homepage": "https://github.com/ethereumjs/ethereumjs-vm",
  "husky": {
    "hooks": {
      "pre-push": "npm run lint"
    }
  },
  "keywords": [
    "VM",
    "ethereum"
  ],
  "license": "MPL-2.0",
  "main": "dist/index.js",
  "name": "ethereumjs-vm",
  "nyc": {
    "exclude": [
      "tests"
    ]
  },
  "optionalDependencies": {},
  "readme": "# SYNOPSIS\n\n[![NPM Package](https://img.shields.io/npm/v/ethereumjs-vm.svg?style=flat-square)](https://www.npmjs.org/package/ethereumjs-vm)\n[![Actions Status](https://github.com/ethereumjs/ethereumjs-vm/workflows/vm-test/badge.svg)](https://github.com/ethereumjs/ethereumjs-vm/actions)\n[![Code Coverage](https://codecov.io/gh/ethereumjs/ethereumjs-vm/branch/master/graph/badge.svg)](https://codecov.io/gh/ethereumjs/ethereumjs-vm)\n[![Gitter](https://img.shields.io/gitter/room/ethereum/ethereumjs.svg?style=flat-square)](https://gitter.im/ethereum/ethereumjs)\n\n[![js-standard-style](https://cdn.rawgit.com/feross/standard/master/badge.svg)](https://github.com/feross/standard)\n\nImplements Ethereum's VM in Javascript.\n\n#### Fork Support\n\nThe VM currently supports the following hardfork rules:\n\n- `Byzantium`\n- `Constantinople`\n- `Petersburg` (default)\n- `Istanbul`\n- `MuirGlacier` (only `mainnet` and `ropsten`)\n\nIf you are still looking for a [Spurious Dragon](https://eips.ethereum.org/EIPS/eip-607) compatible version of this library install the latest of the `2.2.x` series (see [Changelog](./CHANGELOG.md)).\n\n##### MuirGlacier Hardfork Support\n\nAn Ethereum test suite compliant `MuirGlacier` HF implementation is available\nsince the `v4.1.3` VM release. You can activate a `MuirGlacier` VM by using the\n`muirGlacier` `hardfork` option flag.\n\n**Note:** The original `v4.1.2` release contains a critical bug preventing the\n`MuirGlacier` VM to work properly and there is the need to update.\n\n##### Istanbul Harfork Support\n\nAn Ethereum test suite compliant `Istanbul` HF implementation is available\nsince the `v4.1.1` VM release. You can activate an `Istanbul` VM by using the\n`istanbul` `hardfork` option flag.\n\nSupported `Istanbul` EIPs:\n\n- [EIP-152](https://eips.ethereum.org/EIPS/eip-152): Blake 2b `F` precompile,\n  PR [#584](https://github.com/ethereumjs/ethereumjs-vm/pull/584)\n- [EIP-1108](https://eips.ethereum.org/EIPS/eip-1108): Reduce `alt_bn128`\n  precompile gas costs,  \n  PR [#540](https://github.com/ethereumjs/ethereumjs-vm/pull/540)\n  (already released in `v4.0.0`)\n- [EIP-1344](https://eips.ethereum.org/EIPS/eip-1344): Add ChainID Opcode,\n  PR [#572](https://github.com/ethereumjs/ethereumjs-vm/pull/572)\n- [EIP-1884](https://eips.ethereum.org/EIPS/eip-1884): Trie-size-dependent\n  Opcode Repricing,\n  PR [#581](https://github.com/ethereumjs/ethereumjs-vm/pull/581)\n- [EIP-2200](https://eips.ethereum.org/EIPS/eip-2200): Rebalance net-metered\n  SSTORE gas costs,\n  PR [#590](https://github.com/ethereumjs/ethereumjs-vm/pull/590)\n\n# INSTALL\n\n`npm install ethereumjs-vm`\n\n# USAGE\n\n```javascript\nconst BN = require('bn.js')\nvar VM = require('ethereumjs-vm').default\n\n// Create a new VM instance\n// For explicity setting the HF use e.g. `new VM({ hardfork: 'petersburg' })`\nconst vm = new VM()\n\nconst STOP = '00'\nconst ADD = '01'\nconst PUSH1 = '60'\n\n// Note that numbers added are hex values, so '20' would be '32' as decimal e.g.\nconst code = [PUSH1, '03', PUSH1, '05', ADD, STOP]\n\nvm.on('step', function(data) {\n  console.log(`Opcode: ${data.opcode.name}\\tStack: ${data.stack}`)\n})\n\nvm.runCode({\n  code: Buffer.from(code.join(''), 'hex'),\n  gasLimit: new BN(0xffff),\n})\n  .then(results => {\n    console.log('Returned : ' + results.returnValue.toString('hex'))\n    console.log('gasUsed  : ' + results.gasUsed.toString())\n  })\n  .catch(err => console.log('Error    : ' + err))\n```\n\n## Example\n\nThis projects contain the following examples:\n\n1. [./examples/run-blockchain](./examples/run-blockchain): Loads tests data, including accounts and blocks, and runs all of them in the VM.\n1. [./examples/run-code-browser](./examples/run-code-browser): Show how to use this library in a browser.\n1. [./examples/run-solidity-contract](./examples/run-solidity-contract): Compiles a Solidity contract, and calls constant and non-constant functions.\n1. [./examples/run-transactions-complete](./examples/run-transactions-complete): Runs a contract-deployment transaction and then calls one of its functions.\n1. [./examples/decode-opcodes](./examples/decode-opcodes): Decodes a binary EVM program into its opcodes.\n\nAll of the examples have their own `README.md` explaining how to run them.\n\n# BROWSER\n\nTo build the VM for standalone use in the browser, see: [Running the VM in a browser](https://github.com/ethereumjs/ethereumjs-vm/tree/master/examples/run-code-browser).\n\n# API\n\n## VM\n\nFor documentation on `VM` instantiation, exposed API and emitted `events` see generated [API docs](./docs/README.md).\n\n## StateManger\n\nThe API for the `StateManager` is currently in `Beta`, separate documentation can be found [here](./docs/classes/statemanager.md), see also [release notes](https://github.com/ethereumjs/ethereumjs-vm/releases/tag/v2.5.0) from the `v2.5.0` VM release for details on the `StateManager` rewrite.\n\n# Internal Structure\n\nThe VM processes state changes at many levels.\n\n- **runBlockchain**\n  - for every block, runBlock\n- **runBlock**\n  - for every tx, runTx\n  - pay miner and uncles\n- **runTx**\n  - check sender balance\n  - check sender nonce\n  - runCall\n  - transfer gas charges\n- **runCall**\n  - checkpoint state\n  - transfer value\n  - load code\n  - runCode\n  - materialize created contracts\n  - revert or commit checkpoint\n- **runCode**\n  - iterate over code\n  - run op codes\n  - track gas usage\n- **OpFns**\n  - run individual op code\n  - modify stack\n  - modify memory\n  - calculate fee\n\nThe opFns for `CREATE`, `CALL`, and `CALLCODE` call back up to `runCall`.\n\n## VM's tracing events\n\nYou can subscribe to the following events of the VM:\n\n- `beforeBlock`: Emits a `Block` right before running it.\n- `afterBlock`: Emits `RunBlockResult` right after running a block.\n- `beforeTx`: Emits a `Transaction` right before running it.\n- `afterTx`: Emits a `RunTxResult` right after running a transaction.\n- `beforeMessage`: Emits a `Message` right after running it.\n- `afterMessage`: Emits an `EVMResult` right after running a message.\n- `step`: Emits an `InterpreterStep` right before running an EVM step.\n- `newContract`: Emits a `NewContractEvent` right before creating a contract. This event contains the deployment code, not the deployed code, as the creation message may not return such a code.\n\n### Asynchronous event handlers\n\nYou can perform asynchronous operations from within an event handler\nand prevent the VM to keep running until they finish.\n\nIn order to do that, your event handler has to accept two arguments.\nThe first one will be the event object, and the second one a function.\nThe VM won't continue until you call this function.\n\nIf an exception is passed to that function, or thrown from within the\nhandler or a function called by it, the exception will bubble into the\nVM and interrupt it, possibly corrupting its state. It's strongly\nrecommended not to do that.\n\n### Synchronous event handlers\n\nIf you want to perform synchronous operations, you don't need\nto receive a function as the handler's second argument, nor call it.\n\nNote that if your event handler receives multiple arguments, the second\none will be the continuation function, and it must be called.\n\nIf an exception is thrown from withing the handler or a function called\nby it, the exception will bubble into the VM and interrupt it, possibly\ncorrupting its state. It's strongly recommended not to throw from withing\nevent handlers.\n\n# DEVELOPMENT\n\nDeveloper documentation - currently mainly with information on testing and debugging - can be found [here](./developer.md).\n\n# EthereumJS\n\nSee our organizational [documentation](https://ethereumjs.readthedocs.io) for an introduction to `EthereumJS` as well as information on current standards and best practices.\n\nIf you want to join for work or do improvements on the libraries have a look at our [contribution guidelines](https://ethereumjs.readthedocs.io/en/latest/contributing.html).\n\n# LICENSE\n\n[MPL-2.0](https://www.mozilla.org/MPL/2.0/)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/ethereumjs/ethereumjs-vm.git"
  },
  "scripts": {
    "build:dist": "ethereumjs-config-build",
    "coverage": "nyc npm run coverage:test && nyc report --reporter=lcov",
    "coverage:test": "npm run build:dist && tape './tests/api/**/*.js' ./tests/tester.js --state --dist",
    "docs:build": "typedoc lib",
    "format": "ethereumjs-config-format",
    "format:fix": "ethereumjs-config-format-fix",
    "formatTest": "node ./scripts/formatTest",
    "lint": "ethereumjs-config-lint",
    "lint:fix": "ethereumjs-config-lint-fix",
    "prepublishOnly": "npm run lint && npm run build:dist && npm run test:buildIntegrity",
    "test": "echo \"[INFO] Generic test cmd not used. See package.json for more specific test run cmds.\"",
    "test:API": "npm run build:dist && tape './tests/api/**/*.js'",
    "test:API:browser": "npm run build:dist && karma start karma.conf.js",
    "test:blockchain": "npm run build:dist && node --stack-size=1500 ./tests/tester --blockchain --dist",
    "test:buildIntegrity": "npm run test:state -- --test='stackOverflow'",
    "test:state": "npm run build:dist && node ./tests/tester --state --dist",
    "test:state:allForks": "npm run test:state -- --fork=Byzantium && npm run test:state -- --fork=Constantinople && npm run test:state -- --fork=Petersburg && npm run test:state -- --fork=Istanbul && npm run test:state -- --fork=MuirGlacier",
    "test:state:selectedForks": "npm run test:state -- --fork=Petersburg && npm run test:state -- --fork=Istanbul && npm run test:state -- --fork=MuirGlacier",
    "test:state:slow": "npm run test:state -- --runSkipped=slow",
    "test:vm": "node ./tests/tester --vm",
    "tsc": "ethereumjs-config-tsc",
    "tslint": "ethereumjs-config-tslint",
    "tslint:fix": "ethereumjs-config-tslint-fix"
  },
  "standard": {
    "ignore": [
      "dist/**",
      "examples/runcode-browserify.js"
    ]
  },
  "types": "dist/index.d.ts",
  "version": "4.1.3"
}
