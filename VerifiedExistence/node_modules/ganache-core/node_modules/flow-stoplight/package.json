{
  "_args": [
    [
      "flow-stoplight@https://registry.npmjs.org/flow-stoplight/-/flow-stoplight-1.0.0.tgz",
      "/home/dominik/blockchain/DocProof/node_modules/ganache-core"
    ]
  ],
  "_from": "flow-stoplight@https://registry.npmjs.org/flow-stoplight/-/flow-stoplight-1.0.0.tgz",
  "_id": "flow-stoplight@1.0.0",
  "_inCache": true,
  "_location": "/ganache-core/flow-stoplight",
  "_phantomChildren": {},
  "_requested": {
    "name": "flow-stoplight",
    "raw": "flow-stoplight@https://registry.npmjs.org/flow-stoplight/-/flow-stoplight-1.0.0.tgz",
    "rawSpec": "https://registry.npmjs.org/flow-stoplight/-/flow-stoplight-1.0.0.tgz",
    "scope": null,
    "spec": "https://registry.npmjs.org/flow-stoplight/-/flow-stoplight-1.0.0.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "/ganache-core/ethereumjs-blockchain"
  ],
  "_resolved": "https://registry.npmjs.org/flow-stoplight/-/flow-stoplight-1.0.0.tgz",
  "_shasum": "4a292c5bcff8b39fa6cc0cb1a853d86f27eeff7b",
  "_shrinkwrap": null,
  "_spec": "flow-stoplight@https://registry.npmjs.org/flow-stoplight/-/flow-stoplight-1.0.0.tgz",
  "_where": "/home/dominik/blockchain/DocProof/node_modules/ganache-core",
  "author": "",
  "dependencies": {},
  "description": "A simple flow control mechanism.",
  "devDependencies": {
    "tape": "^4.4.0"
  },
  "license": "ISC",
  "main": "index.js",
  "name": "flow-stoplight",
  "optionalDependencies": {},
  "readme": "### Stoplight\n\nA simple flow control mechanism.\n\nHas two modes: \"go\" and \"stop\".\n\nStarts stopped.\n\n```js\nvar stoplight = new Stoplight()\n\nstoplight.await(function(){\n  // this will called when the stoplight is set to \"go\"\n  // if its already \"go\", it will be called on the next frame\n})\n\n// starts stopped\nstoplight.go()\n```\n\n\n### Example\n\nHere is a class that has some async intialization process,\nbut can have its asynchronous method called immediately w/o breaking.\n\n```js\n\nfunction MyClass() {\n  var self = this\n  self._stoplight = new Stoplight()\n  asyncInitialization(function(){\n    self._stoplight.go()\n  })\n}\n\nMyClass.prototype.asyncMethod = function(cb){\n  var self = this\n  self._stoplight.await(function(){\n    // handle the method here and you can be sure that\n    // the async initialization has finished\n  })\n}\n```",
  "readmeFilename": "README.md",
  "scripts": {
    "test": "node test.js"
  },
  "version": "1.0.0"
}
